import { Education, EducationId } from './education.entity';
type PropOrFactory<T> = T | ((index: number) => T);
export declare class EducationFakeBuilder<TBuild = any> {
    private _entityId;
    private _personId;
    private _title;
    private _educationType;
    private _institute;
    private _address;
    private _startDate;
    private _endDate;
    private _description;
    private _isCurrent;
    private _isVerified;
    private _createdAt;
    private _updatedAt;
    private countObjs;
    static aEducation(): EducationFakeBuilder<Education>;
    static theEducations(countObjs: number): EducationFakeBuilder<Education[]>;
    private chance;
    private constructor();
    withUuid(valueOrFactory: PropOrFactory<EducationId>): this;
    withPersonId(valueOrFactory: PropOrFactory<string>): this;
    withTitle(valueOrFactory: PropOrFactory<string>): this;
    withEducationType(valueOrFactory: PropOrFactory<string>): this;
    withInstitute(valueOrFactory: PropOrFactory<string>): this;
    withAddress(valueOrFactory: PropOrFactory<string | null>): this;
    withStartDate(valueOrFactory: PropOrFactory<Date>): this;
    withEndDate(valueOrFactory: PropOrFactory<Date>): this;
    withDescription(valueOrFactory: PropOrFactory<string>): this;
    currently(): this;
    uncurrently(): this;
    verified(): this;
    unverified(): this;
    withCreatedAt(valueOrFactory: PropOrFactory<Date>): this;
    withUpdatedAt(valueOrFactory: PropOrFactory<Date>): this;
    withInvalidPersonIdTooLong(value?: string): this;
    withInvalidTitleTooLong(value?: string): this;
    withInvalidEducationTypeTooLong(value?: string): this;
    withInvalidInstituteTooLong(value?: string): this;
    build(): TBuild;
    get entityId(): any;
    get personId(): any;
    get title(): any;
    get educationType(): any;
    get institute(): any;
    get address(): any;
    get startDate(): any;
    get endDate(): any;
    get description(): any;
    get isVerified(): any;
    get isCurrent(): any;
    get createdAt(): any;
    get updatedAt(): any;
    private getValue;
    private callFactory;
}
export {};
